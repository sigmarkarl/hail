buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
  id 'java'
  id 'scala'
  id 'idea'
  id 'maven'
  id 'com.github.johnrengelman.shadow' version '5.2.0'
  id "de.undercouch.download" version "3.2.0"
  id 'eclipse'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    maven { url "https://repo.hortonworks.com/content/repositories/releases/" }
    maven { url "https://repo.spring.io/plugins-release/" }
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.runtimeClasspath += files("prebuilt/lib")

task nativeLib(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make native-lib; gradle is being phased out"; exit 1'
}

task nativeLibTest(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make native-lib-test; gradle is being phased out"; exit 1'
}

task nativeLibClean(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make native-lib-clean; gradle is being phased out"; exit 1'
}

task nativeLibPrebuilt(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make native-lib-prebuilt; gradle is being phased out"; exit 1'
}

task nativeLibResetPrebuilt(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make native-lib-reset-prebuilt; gradle is being phased out"; exit 1'
}

sourceSets {
    main {
        resources {
            srcDirs "prebuilt/lib"
        }
    }
}

compileJava {
    options.compilerArgs << "-Xlint:all" << "-Werror" << "-XDenableSunApiLintControl"
}
tasks.withType(JavaCompile) {
    options.fork = true // necessary to make -XDenableSunApiLintControl work
}

task releaseJar(type: Exec) {
    commandLine 'sh', '-c', 'echo "use HAIL_COMPILE_NATIVES=1 make shadowJar; gradle is being phased out"; exit 1'
}

compileScala {
    scalaCompileOptions.additionalParameters = [
        "-target:jvm-1.8",
        "-feature",
        "-Xno-patmat-analysis",
        //"-Xfatal-warnings",
        "-Xlint:_",
        "-deprecation",
        "-unchecked",
        "-Xlint:-infer-any",
        "-Xlint:-unsound-match"
    ]

    scalaCompileOptions.forkOptions.with {
        jvmArgs = ["-Xms512M",
                   "-Xmx4096M",
                   "-Xss4M",
                   "-XX:MaxMetaspaceSize=1024M"]
    }
}

project.ext {
    cachedBreezeVersion = null

    sparkVersion = System.getProperty("spark.version", "3.0.0-preview2")
    scalaVersion = System.getProperty("scala.version", "2.12.10")
    scalaMajorVersion = (scalaVersion =~ /^\d+.\d+/)[0]
}

String breezeVersion() {
  if (cachedBreezeVersion == null) {
    def artifacts = configurations.justSpark.getResolvedConfiguration().getResolvedArtifacts()
    artifacts.each { ResolvedArtifact artifact ->
	def module = artifact.getModuleVersion().getId()
	if (module.getGroup() == 'org.scalanlp'
	  && module.getName() == 'breeze_' + scalaMajorVersion) {
	    cachedBreezeVersion = module.getVersion()
	}
    }
    if (cachedBreezeVersion == null) {
      throw new RuntimeException('Unable to determine breeze library version')
    }
  }
  return cachedBreezeVersion
}

configurations {
    justSpark

    all {
        resolutionStrategy {
            componentSelection {
	      withModule('org.scalanlp:breeze-natives_' + scalaMajorVersion) { ComponentSelection selection ->
		  if (selection.candidate.getVersion() != breezeVersion()) {
		    selection.reject()
		  }
	      }
	    }
	}
    }

    compile.extendsFrom bundled, unbundled
    testCompile.extendsFrom compile, hailTest
    hailJar.extendsFrom bundled
    hailJar {
        exclude group: 'org.scala-lang', module: 'scala-library'
    }

    hailTestJar.extendsFrom hailJar, hailTest
    hailTestJar {
        exclude group: 'org.scala-lang', module: 'scala-library'
    }
}

dependencies {
    justSpark 'org.apache.spark:spark-mllib_' + scalaMajorVersion + ':' + sparkVersion

    unbundled 'org.scala-lang:scala-library:' + scalaVersion
    unbundled 'org.scala-lang:scala-reflect:' + scalaVersion

    unbundled('org.apache.spark:spark-core_' + scalaMajorVersion + ':' + sparkVersion) {
        exclude module: 'hadoop-client'
    }
    unbundled('org.apache.hadoop:hadoop-client:2.7.1') {
        exclude module: 'servlet-api'
        exclude module: 'asm'
    }
    unbundled 'org.apache.spark:spark-sql_' + scalaMajorVersion + ':' + sparkVersion
    unbundled 'org.apache.spark:spark-mllib_' + scalaMajorVersion + ':' + sparkVersion
    bundled 'org.lz4:lz4-java:1.4.0'
    bundled('org.scalanlp:breeze-natives_' + scalaMajorVersion + ':+') {
        transitive = false
    }
    bundled 'com.github.fommil.netlib:all:1.1.2'
    bundled('com.github.samtools:htsjdk:2.21.0') {
        transitive = false
    }

    bundled group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    bundled 'org.elasticsearch:elasticsearch-spark-20_2.11:7.0.1'

    bundled 'com.google.cloud:google-cloud-storage:1.106.0'

    bundled 'org.apache.httpcomponents:httpcore:4.4.13'
    bundled('org.apache.httpcomponents:httpclient:4.5.12') {
        transitive = false
    }

    bundled group: 'org.ow2.asm', name: 'asm', version: '7.3.1'
    bundled group: 'org.ow2.asm', name: 'asm-util', version: '7.3.1'
    bundled group: 'org.ow2.asm', name: 'asm-analysis', version: '7.3.1'

    bundled 'net.java.dev.jna:jna:4.2.2'
    bundled('net.sourceforge.jdistlib:jdistlib:0.4.5') {
        transitive = false
    }

    hailTest 'org.testng:testng:6.8.21'
    hailTest 'org.scalatest:scalatest_' + scalaMajorVersion + ':3.2.0-SNAP10'

    unbundled group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    bundled group: 'commons-codec', name: 'commons-codec', version: '1.11'
    bundled group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    bundled 'com.indeed:lsmtree-core:1.0.7'
    bundled 'com.indeed:util-serialization:1.0.31'
    bundled 'com.indeed:util-mmap:1.0.31'
    bundled group: 'org.freemarker', name: 'freemarker', version: '2.3.14'
}

task(checkSettings) doLast {
    def checkSeed = System.getProperty("check.seed", "1")
    if (checkSeed == "random")
        checkSeed = new Random().nextInt().toString()
    def checkSize = System.getProperty("check.size", "1000")
    def checkCount = System.getProperty("check.count", "10")

    println "check: seed = $checkSeed, size = $checkSize, count = $checkCount"

    // override with these defaults, random seed
    System.setProperty("check.seed", checkSeed)
    System.setProperty("check.size", checkSize)
    System.setProperty("check.count", checkCount)
}

test {
    useTestNG() {
        suites 'testng.xml'
    }

    // avoid stack overflow in lmmLargeExampleTest on some systems
    jvmArgs '-Xss4m', '-Xmx4096M'

    systemProperties System.getProperties()

    testLogging {
        events "passed", "skipped", "failed"
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    maxParallelForks((System.env.PARALLELISM == null ? "1" : System.env.PARALLELISM).toInteger())

    // make poop emoji work in generated bytecode
    systemProperty "file.encoding", "utf-8"

    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

test.dependsOn(checkSettings)

task testPython(type: Exec, dependsOn: shadowJar) {
    commandLine 'sh', '-c', 'echo "use make pytest; gradle is being phased out"; exit 1'
}

task doctest(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make doctest; gradle is being phased out"; exit 1'
}

task testAll(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make test; gradle is being phased out"; exit 1'
}

tasks.withType(ShadowJar) {
    manifest {
        attributes 'Implementation-Title': 'Hail',
                   'Implementation-Version': '0.0.1-SNAPSHOT'
    }
    baseName = project.name + '-all'
    mergeServiceFiles()
    zip64 true

    relocate 'org.apache.http', 'is.hail.relocated.org.apache.http'
    relocate 'com.google.common', 'is.hail.relocated.com.google.common'
    relocate 'org.objectweb', 'is.hail.relocated.org.objectweb'
    relocate 'org.codehaus.jackson', 'is.hail.relocated.org.codehaus.jackson'
    relocate 'org.apache.commons.lang3', 'is.hail.relocated.org.apache.commons.lang3'
    relocate 'org.apache.commons.io', 'is.hail.relocated.org.apache.commons.io'
    // we should really shade indeed, but it has native libraries
    // relocate 'com.indeed', 'is.hail.relocated.com.indeed'
    relocate 'com.google.cloud', 'is.hail.relocated.com.google.cloud'
    relocate 'org.elasticsearch', 'is.hail.relocated.org.elasticsearch'
    relocate 'com.github.samtools', 'is.hail.relocated.com.github.samtools'
    relocate 'org.lz4', 'is.hail.relocated.org.lz4'
    relocate 'org.freemarker', 'is.hail.relocated.org.freemarker'

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

shadowJar {
    classifier = 'spark'
    from project.sourceSets.main.output
    configurations = [project.configurations.hailJar]
}

task shadowTestJar(type: ShadowJar) {
    classifier = 'spark-test'
    from project.sourceSets.main.output, project.sourceSets.test.output
    configurations = [project.configurations.hailTestJar]
}

task archiveZip(type: Exec) {
    commandLine 'sh', '-c', 'echo "zips are no longer supported, use a python wheel"; exit 1'
}

task cleanDocs(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make clean; gradle is being phased out"; exit 1'
}

task makeDocs(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make docs; gradle is being phased out"; exit 1'
}

task makeDocsNoTest(type: Exec) {
    commandLine 'sh', '-c', 'echo "use make docs-no-test; gradle is being phased out"; exit 1'
}
